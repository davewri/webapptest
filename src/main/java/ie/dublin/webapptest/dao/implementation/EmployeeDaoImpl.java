package ie.dublin.webapptest.dao.implementation;

import ie.dublin.webapptest.dao.EmployeeDao;
import ie.dublin.webapptest.model.Employee;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import java.sql.*;
import java.util.List;

@Repository
public class EmployeeDaoImpl implements EmployeeDao {
    //Order employees by employee id ascending
    private final String SELECT_SQL = "SELECT * FROM dbo.Employee ORDER BY employeeId ASC";
    private final String SELECT_SQL_BY_ID = "SELECT * FROM dbo.Employee WHERE employeeId = ? ORDER BY employeeId ASC";
    private final String SELECT_SQL_BY_JOB_ID = "SELECT * FROM dbo.Employee WHERE titleId = ? ORDER BY employeeId ASC";

    private final String SELECT_SQL_BY_SEARCH = "SELECT * FROM dbo.Employee WHERE employeeName like :search or email like :search";
    private final String INSERT_SQL = "INSERT INTO Employee(employeeName,titleId,email,telephone,startYear,department,university) values(?,?,?,?,?,?,?)";
    private final String UPDATE_SQL = "UPDATE dbo.Employee SET employeeName = ?, titleId = ?, email = ?, telephone = ?, startYear = ?, department = ?, university = ? WHERE employeeId = ?";
    private final String DELETE_SQL_BY_ID = "DELETE FROM dbo.Employee WHERE EmployeeId = ?";

    @Autowired
    private JdbcTemplate jdbcTemplate;

    // Implement findAll() which retrieves all employees from the DB
    // EmployeeMapper() converts rows from the result into Employee objects
    public List<Employee> findAll() {
        return jdbcTemplate.query(SELECT_SQL, new EmployeeMapper());
    }

    public Employee findById(int id) {
        return jdbcTemplate.queryForObject(SELECT_SQL_BY_ID, new Object[]{id}, new EmployeeMapper());
    }

    public List<Employee> findByJobTitle(int id) {
        return jdbcTemplate.query(SELECT_SQL_BY_JOB_ID, new Object[]{id}, new EmployeeMapper());
    }

    //Update an existing employee
    public int update(final Employee employee) {
        // Update employee using values in employee object passed as a parameter
        // As this is an update a new primary key id is not required

        // The query requires 8 parameters which will be passed as an object
        Object[] params = {
                employee.getEmployeeName(),
                employee.getTitleId(),
                employee.getEmail(),
                employee.getTelephone(),
                employee.getStartYear(),
                employee.getDepartment(),
                employee.getUniversity(),
                employee.getEmployeeId()
        };

        // execute the query using params, returning the number of rows affected
        return jdbcTemplate.update(UPDATE_SQL, params);
    }

    public Employee create(final Employee employee) {

        // A new Primary key (identity) value will be generated by the database on insert
        // This value is retrieved using KeyHolder
        KeyHolder holder = new GeneratedKeyHolder();
        jdbcTemplate.update(new PreparedStatementCreator() {
            @Override
            // Prepared statement replaces ? parameters with values
            // Create the statement and connect
            public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {
                PreparedStatement ps = connection.prepareStatement(INSERT_SQL, Statement.RETURN_GENERATED_KEYS);
                // Set each parameter by index (of ? in SQL) and value
                ps.setString(1, employee.getEmployeeName());
                ps.setInt(2, employee.getTitleId());
                ps.setString(3, employee.getEmail());
                ps.setString(4, employee.getTelephone());
                ps.setInt(5, employee.getStartYear());
                ps.setString(6, employee.getDepartment());
                ps.setString(7, employee.getUniversity());

                // return the completed statement
                return ps;
            }
        }, holder);

        // Get the new id and assign it to the new employee object
        int newEmployeeId = holder.getKey().intValue();
        employee.setEmployeeId(newEmployeeId);

        // Return the newly created employee
        return employee;
    }

    // Delete a employee by id
    public int delete(int id) {
        // Use the delete sql, setting the id paramater
        // This method returns the number of rows affected
        return jdbcTemplate.update(DELETE_SQL_BY_ID, new Object[] {id});
    }

    // return a list of employees matching search term
    public List<Employee> findBySearchText(String searchText)  {
        // The named parameter template assigns values to the named parameters (as opposed to ?) in an SQL statement
        NamedParameterJdbcTemplate namedParamJdbcTemplate = new NamedParameterJdbcTemplate(jdbcTemplate);
        MapSqlParameterSource parameters = new MapSqlParameterSource();

        // Set the :search parameter
        // % is a wildcard - the search term will be used to match files using the like operator
        // https://www.w3schools.com/SQL/sql_like.asp
        parameters.addValue("search", "%" + searchText + "%");

        // execute the query with named parameters
        // use MEmployeeMapper() to process the resultset and return the resulting employee list
        return namedParamJdbcTemplate.query(SELECT_SQL_BY_SEARCH, parameters, new EmployeeMapper());
    }
}

class EmployeeMapper implements RowMapper<Employee> {
    @Override
    public Employee mapRow(ResultSet rs, int rowNum) throws SQLException {
        Employee e = new Employee();
        e.setEmployeeId(rs.getInt("employeeId"));
        e.setTitleId(rs.getInt("titleId"));
        e.setEmployeeName(rs.getString("employeeName"));
        e.setEmail(rs.getString("email"));
        e.setTelephone(rs.getString("telephone"));
        e.setStartYear(rs.getInt("startYear"));
        e.setDepartment(rs.getString("department"));
        e.setUniversity(rs.getString("university"));
        return e;
    }
}